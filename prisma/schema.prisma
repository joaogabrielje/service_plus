// NextAuth required models
model Account {
  id                 String  @id @default(dbgenerated("gen_random_uuid()"))
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  email     String    @unique
  password  String?
  status    String    @default("ACTIVE")
  image     String?
  emailVerified DateTime?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  memberships Membership[]
  attendances Attendance[]
  customers   Customer[]
  queues      Queue[] @relation("AttendantQueue")
  linkRequests OrganizationLinkRequest[]
  accounts    Account[]
  sessions    Session[]

  @@map("users")
}
  model OrganizationLinkRequest {
    id        String   @id @default(dbgenerated("gen_random_uuid()"))
    userId    String
    orgId     String
    status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt

    user        User         @relation(fields: [userId], references: [id])
    organization Organization @relation(fields: [orgId], references: [id])
  }

model Organization {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  cnpj      String    @unique
  ie        String?
  cep       String?
  address   String
  number    String?
  state     String?
  city      String?
  email     String?
  phone     String?
  description String?
  isDeleted   Boolean @default(false)
  primaryColor   String?
  secondaryColor String?
  logoUrl        String?
  slug      String    @unique
  status    String    @default("ACTIVE")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  memberships Membership[]
  attendances Attendance[]
  customers   Customer[]
  queues      Queue[]
  supportTypes SupportType[]
  linkRequests OrganizationLinkRequest[]

  @@map("organizations")
}

model Membership {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  userId    String    @map("user_id")
  orgId     String    @map("org_id")
  role      String
  permissions Json?
  isDeleted   Boolean @default(false)
  status    String    @default("ACTIVE")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user        User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])

  @@unique([userId, orgId])
  @@map("memberships")
}

model SupportType {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  orgId     String   @map("org_id")
  status    String   @default("ACTIVE")
  isDeleted Boolean  @default(false)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  attendances Attendance[]

  @@unique([name, orgId])
  @@map("support_type")
}

model Attendance {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  userId    String    @map("user_id")
  orgId     String    @map("org_id")
  customerId String?  @map("customer_id")
  supportTypeId String? @map("support_type_id")
  checkIn   DateTime  @map("check_in") @db.Timestamptz(6)
  checkOut  DateTime? @map("check_out") @db.Timestamptz(6)
  supportMode String? @map("support_mode") // "remoto" ou "presencial"
  rating      Int?
  feedback    String?
  isDeleted   Boolean @default(false)
  notes      String?  @map("notes")
  status    String    @default("ACTIVE")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user        User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])
  customer    Customer?    @relation(fields: [customerId], references: [id])
  supportType SupportType? @relation(fields: [supportTypeId], references: [id])

  @@map("attendance")
}

model Customer {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  userId       String    @map("user_id")
  orgId        String    @map("org_id")
  name         String
  email        String?
  cpfCnpj      String?
  phone1       String?
  phone2       String?
  address      String?
  number       String?
  neighborhood String?
  city         String?
  state        String?
  cep          String?
  tipoPessoa   String?   // "FISICA" ou "JURIDICA"
  obs          String?
  tags         String[]  // segmentação
  preferredContact String? // whatsapp, telefone, email
  lastContactedAt DateTime?
  customFields  Json?
  isDeleted     Boolean   @default(false)
  status        String    @default("ACTIVE")
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  attendances  Attendance[]
  queues       Queue[]

  @@map("customer")
}

model Queue {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  orgId       String   @map("org_id")
  customerId  String   @map("customer_id")
  attendantId String?  @map("attendant_id")
  status      String   @default("WAITING") // "WAITING", "IN_PROGRESS", "DONE"
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [orgId], references: [id])
  customer     Customer     @relation(fields: [customerId], references: [id])
  attendant    User?        @relation("AttendantQueue", fields: [attendantId], references: [id])
  priority    Int?
  scheduledAt DateTime?
  isDeleted   Boolean  @default(false)

  @@map("queue")
}

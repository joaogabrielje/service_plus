const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createAdmin() {
  try {
    // Hash da senha padr√£o
    const hashedPassword = await bcrypt.hash('admin123', 12);
    
    // Criar usu√°rio admin
    const adminUser = await prisma.user.create({
      data: {
        name: 'Administrador',
        email: 'admin@serviceplus.com',
        password: hashedPassword,
        status: 'ACTIVE',
        emailVerified: new Date(),
      },
    });

    console.log('‚úÖ Usu√°rio admin criado com sucesso!');
    console.log('üìß Email: admin@serviceplus.com');
    console.log('üîí Senha: admin123');
    console.log('üÜî ID:', adminUser.id);
    
    // Verificar se existe alguma organiza√ß√£o para criar membership
    const orgs = await prisma.organization.findMany({
      take: 1
    });
    
    if (orgs.length > 0) {
      // Criar membership como ADMIN na primeira organiza√ß√£o
      await prisma.membership.create({
        data: {
          userId: adminUser.id,
          orgId: orgs[0].id,
          role: 'ADMIN',
          status: 'ACTIVE'
        }
      });
      
      console.log('‚úÖ Membership admin criado na organiza√ß√£o:', orgs[0].name);
    } else {
      console.log('‚ÑπÔ∏è  Nenhuma organiza√ß√£o encontrada. O usu√°rio foi criado mas sem membership.');
      console.log('üí° Crie uma organiza√ß√£o primeiro ou adicione o membership manualmente.');
    }
    
  } catch (error) {
    if (error.code === 'P2002') {
      console.log('‚ö†Ô∏è  Usu√°rio admin j√° existe com este email!');
      
      // Buscar o usu√°rio existente
      const existingUser = await prisma.user.findUnique({
        where: { email: 'admin@serviceplus.com' },
        include: {
          memberships: {
            include: {
              organization: true
            }
          }
        }
      });
      
      if (existingUser) {
        console.log('üìß Email: admin@serviceplus.com');
        console.log('üÜî ID:', existingUser.id);
        console.log('üë• Organiza√ß√µes:', existingUser.memberships.map(m => m.organization.name));
      }
    } else {
      console.error('‚ùå Erro ao criar usu√°rio admin:', error);
    }
  } finally {
    await prisma.$disconnect();
  }
}

createAdmin();
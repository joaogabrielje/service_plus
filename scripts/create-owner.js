const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createOwner() {
  try {
    // Hash da senha padr√£o
    const hashedPassword = await bcrypt.hash('owner123', 12);
    
    console.log('üöÄ Criando usu√°rio OWNER...\n');
    
    // Criar usu√°rio owner
    const ownerUser = await prisma.user.create({
      data: {
        name: 'Super Administrador',
        email: 'owner@serviceplus.com',
        password: hashedPassword,
        status: 'ACTIVE',
        emailVerified: new Date(),
      },
    });

    console.log('‚úÖ Usu√°rio OWNER criado com sucesso!');
    console.log('üìß Email: owner@serviceplus.com');
    console.log('üîí Senha: owner123');
    console.log('üÜî ID:', ownerUser.id);
    console.log('üëë Role: OWNER (Super Administrador)\n');
    
    // Buscar todas as organiza√ß√µes para criar memberships
    const orgs = await prisma.organization.findMany();
    
    if (orgs.length > 0) {
      console.log('üè¢ Criando memberships OWNER em todas as organiza√ß√µes:');
      
      for (const org of orgs) {
        await prisma.membership.create({
          data: {
            userId: ownerUser.id,
            orgId: org.id,
            role: 'OWNER',
            status: 'ACTIVE',
            isDeleted: false
          }
        });
        
        console.log(`   ‚úÖ ${org.name} (${org.id})`);
      }
      
      console.log(`\nüéØ Total: ${orgs.length} membership(s) criado(s)`);
    } else {
      console.log('‚ÑπÔ∏è  Nenhuma organiza√ß√£o encontrada.');
      console.log('üí° O usu√°rio OWNER foi criado, mas voc√™ precisar√° criar organiza√ß√µes primeiro.');
      console.log('üìù Ou usar o comando para criar uma organiza√ß√£o padr√£o.');
    }
    
    console.log('\nüîê CREDENCIAIS DE ACESSO:');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üìß Email: owner@serviceplus.com');
    console.log('üîí Senha: owner123');
    console.log('üåê URL: http://localhost:3000/auth/login');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    
    console.log('\nüéâ PERMISS√ïES DO OWNER:');
    console.log('‚Ä¢ Ver dados de TODAS as empresas');
    console.log('‚Ä¢ Gerenciar TODOS os usu√°rios');
    console.log('‚Ä¢ Acessar relat√≥rios GLOBAIS');
    console.log('‚Ä¢ Controle total do sistema');
    
  } catch (error) {
    if (error.code === 'P2002') {
      console.error('‚ùå Erro: Email j√° est√° em uso!');
      console.log('\nüí° Op√ß√µes:');
      console.log('1. Use outro email no script');
      console.log('2. Delete o usu√°rio existente primeiro');
      console.log('3. Use o script cleanup-accounts.js para limpar');
    } else {
      console.error('‚ùå Erro ao criar usu√°rio OWNER:', error.message);
      console.error('üìã Detalhes:', error);
    }
  } finally {
    await prisma.$disconnect();
  }
}

// Fun√ß√£o para criar organiza√ß√£o padr√£o se n√£o existir
async function createDefaultOrganization() {
  try {
    const existingOrg = await prisma.organization.findFirst();
    
    if (!existingOrg) {
      console.log('üè≠ Criando organiza√ß√£o padr√£o...');
      
      const defaultOrg = await prisma.organization.create({
        data: {
          name: 'ServicePlus',
          slug: 'serviceplus',
          cnpj: '00.000.000/0001-00',
          address: 'Endere√ßo da Empresa',
          status: 'ACTIVE',
          isDeleted: false
        }
      });
      
      console.log('‚úÖ Organiza√ß√£o padr√£o criada:', defaultOrg.name);
      return defaultOrg;
    }
    
    return existingOrg;
  } catch (error) {
    console.error('‚ùå Erro ao criar organiza√ß√£o:', error.message);
    return null;
  }
}

// Executar com op√ß√£o de criar organiza√ß√£o
async function main() {
  console.log('üöÄ SERVICE PLUS - Criador de Super Administrador\n');
  
  // Verificar se j√° existe um owner
  const existingOwner = await prisma.membership.findFirst({
    where: { role: 'OWNER' },
    include: { user: true }
  });
  
  if (existingOwner) {
    console.log('‚ö†Ô∏è  J√° existe um usu√°rio OWNER no sistema:');
    console.log(`   üìß ${existingOwner.user.email}`);
    console.log(`   üë§ ${existingOwner.user.name}`);
    console.log('\n‚ùì Deseja continuar mesmo assim? (Ctrl+C para cancelar)');
    
    // Aguardar 3 segundos para dar chance de cancelar
    await new Promise(resolve => setTimeout(resolve, 3000));
  }
  
  // Criar organiza√ß√£o padr√£o se necess√°rio
  await createDefaultOrganization();
  
  // Criar o usu√°rio owner
  await createOwner();
}

main().catch(console.error);